// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { DataMode } from './DataMode.js';


/**
 * SEN table combining SensorData and SIT
 */
export class SEN implements flatbuffers.IUnpackableObject<SENT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SEN {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSEN(bb:flatbuffers.ByteBuffer, obj?:SEN):SEN {
  return (obj || new SEN()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSEN(bb:flatbuffers.ByteBuffer, obj?:SEN):SEN {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SEN()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('$SEN');
}

/**
 * Latitude of the site
 */
LATITUDE():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

/**
 * Longitude of the site
 */
LONGITUDE():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

/**
 * Altitude of the site
 */
ALTITUDE():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

/**
 * Timestamp of data creation
 */
CREATED_AT():string|null
CREATED_AT(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
CREATED_AT(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Who created the data
 */
CREATED_BY():string|null
CREATED_BY(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
CREATED_BY(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Mode of the data (real, simulated, synthetic)
 */
DATA_MODE():DataMode {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : DataMode.real;
}

/**
 * Identifier of the sensor
 */
ID_SENSOR():string|null
ID_SENSOR(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
ID_SENSOR(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Identifier of the site
 */
SITE_ID():string|null
SITE_ID(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
SITE_ID(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Type of the sensor
 */
SENSOR_TYPE():string|null
SENSOR_TYPE(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
SENSOR_TYPE(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Short form of the sensor type
 */
SENSOR_TYPE_SHORT():string|null
SENSOR_TYPE_SHORT(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
SENSOR_TYPE_SHORT(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Source of the data
 */
SOURCE():string|null
SOURCE(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
SOURCE(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Unique identifier for the data
 */
DATA_ID():string|null
DATA_ID(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
DATA_ID(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Classification marking of the data
 */
CLASSIFICATION():string|null
CLASSIFICATION(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
CLASSIFICATION(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Timestamp of the last update
 */
UPDATED_AT():string|null
UPDATED_AT(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
UPDATED_AT(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Identifier of the user who last updated the data
 */
UPDATED_BY():string|null
UPDATED_BY(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
UPDATED_BY(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Timestamp of the last observation
 */
LAST_OB_TIME():string|null
LAST_OB_TIME(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
LAST_OB_TIME(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Lower left elevation limit
 */
LOWER_LEFT_ELEVATION_LIMIT():number {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Upper left azimuth limit
 */
UPPER_LEFT_AZIMUTH_LIMIT():number {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Lower right elevation limit
 */
LOWER_RIGHT_ELEVATION_LIMIT():number {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Lower left azimuth limit
 */
LOWER_LEFT_AZIMUTH_LIMIT():number {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Upper right elevation limit
 */
UPPER_RIGHT_ELEVATION_LIMIT():number {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Upper right azimuth limit
 */
UPPER_RIGHT_AZIMUTH_LIMIT():number {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Lower right azimuth limit
 */
LOWER_RIGHT_AZIMUTH_LIMIT():number {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Upper left elevation limit
 */
UPPER_LEFT_ELEVATION_LIMIT():number {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Right geostationary belt limit
 */
RIGHT_GEO_BELT_LIMIT():number {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Left geostationary belt limit
 */
LEFT_GEO_BELT_LIMIT():number {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Band of the sensor data
 */
BAND():string|null
BAND(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
BAND(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * Magnitude limit of the sensor
 */
MAGNITUDE_LIMIT():number {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

/**
 * Indicates if the site is taskable
 */
TASKABLE():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startSEN(builder:flatbuffers.Builder) {
  builder.startObject(29);
}

static addLatitude(builder:flatbuffers.Builder, LATITUDE:number) {
  builder.addFieldFloat32(0, LATITUDE, 0.0);
}

static addLongitude(builder:flatbuffers.Builder, LONGITUDE:number) {
  builder.addFieldFloat32(1, LONGITUDE, 0.0);
}

static addAltitude(builder:flatbuffers.Builder, ALTITUDE:number) {
  builder.addFieldFloat32(2, ALTITUDE, 0.0);
}

static addCreatedAt(builder:flatbuffers.Builder, CREATED_ATOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, CREATED_ATOffset, 0);
}

static addCreatedBy(builder:flatbuffers.Builder, CREATED_BYOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, CREATED_BYOffset, 0);
}

static addDataMode(builder:flatbuffers.Builder, DATA_MODE:DataMode) {
  builder.addFieldInt8(5, DATA_MODE, DataMode.real);
}

static addIdSensor(builder:flatbuffers.Builder, ID_SENSOROffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, ID_SENSOROffset, 0);
}

static addSiteId(builder:flatbuffers.Builder, SITE_IDOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, SITE_IDOffset, 0);
}

static addSensorType(builder:flatbuffers.Builder, SENSOR_TYPEOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, SENSOR_TYPEOffset, 0);
}

static addSensorTypeShort(builder:flatbuffers.Builder, SENSOR_TYPE_SHORTOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, SENSOR_TYPE_SHORTOffset, 0);
}

static addSource(builder:flatbuffers.Builder, SOURCEOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, SOURCEOffset, 0);
}

static addDataId(builder:flatbuffers.Builder, DATA_IDOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, DATA_IDOffset, 0);
}

static addClassification(builder:flatbuffers.Builder, CLASSIFICATIONOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, CLASSIFICATIONOffset, 0);
}

static addUpdatedAt(builder:flatbuffers.Builder, UPDATED_ATOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, UPDATED_ATOffset, 0);
}

static addUpdatedBy(builder:flatbuffers.Builder, UPDATED_BYOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, UPDATED_BYOffset, 0);
}

static addLastObTime(builder:flatbuffers.Builder, LAST_OB_TIMEOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, LAST_OB_TIMEOffset, 0);
}

static addLowerLeftElevationLimit(builder:flatbuffers.Builder, LOWER_LEFT_ELEVATION_LIMIT:number) {
  builder.addFieldFloat64(16, LOWER_LEFT_ELEVATION_LIMIT, 0.0);
}

static addUpperLeftAzimuthLimit(builder:flatbuffers.Builder, UPPER_LEFT_AZIMUTH_LIMIT:number) {
  builder.addFieldFloat64(17, UPPER_LEFT_AZIMUTH_LIMIT, 0.0);
}

static addLowerRightElevationLimit(builder:flatbuffers.Builder, LOWER_RIGHT_ELEVATION_LIMIT:number) {
  builder.addFieldFloat64(18, LOWER_RIGHT_ELEVATION_LIMIT, 0.0);
}

static addLowerLeftAzimuthLimit(builder:flatbuffers.Builder, LOWER_LEFT_AZIMUTH_LIMIT:number) {
  builder.addFieldFloat64(19, LOWER_LEFT_AZIMUTH_LIMIT, 0.0);
}

static addUpperRightElevationLimit(builder:flatbuffers.Builder, UPPER_RIGHT_ELEVATION_LIMIT:number) {
  builder.addFieldFloat64(20, UPPER_RIGHT_ELEVATION_LIMIT, 0.0);
}

static addUpperRightAzimuthLimit(builder:flatbuffers.Builder, UPPER_RIGHT_AZIMUTH_LIMIT:number) {
  builder.addFieldFloat64(21, UPPER_RIGHT_AZIMUTH_LIMIT, 0.0);
}

static addLowerRightAzimuthLimit(builder:flatbuffers.Builder, LOWER_RIGHT_AZIMUTH_LIMIT:number) {
  builder.addFieldFloat64(22, LOWER_RIGHT_AZIMUTH_LIMIT, 0.0);
}

static addUpperLeftElevationLimit(builder:flatbuffers.Builder, UPPER_LEFT_ELEVATION_LIMIT:number) {
  builder.addFieldFloat64(23, UPPER_LEFT_ELEVATION_LIMIT, 0.0);
}

static addRightGeoBeltLimit(builder:flatbuffers.Builder, RIGHT_GEO_BELT_LIMIT:number) {
  builder.addFieldFloat64(24, RIGHT_GEO_BELT_LIMIT, 0.0);
}

static addLeftGeoBeltLimit(builder:flatbuffers.Builder, LEFT_GEO_BELT_LIMIT:number) {
  builder.addFieldFloat64(25, LEFT_GEO_BELT_LIMIT, 0.0);
}

static addBand(builder:flatbuffers.Builder, BANDOffset:flatbuffers.Offset) {
  builder.addFieldOffset(26, BANDOffset, 0);
}

static addMagnitudeLimit(builder:flatbuffers.Builder, MAGNITUDE_LIMIT:number) {
  builder.addFieldFloat64(27, MAGNITUDE_LIMIT, 0.0);
}

static addTaskable(builder:flatbuffers.Builder, TASKABLE:boolean) {
  builder.addFieldInt8(28, +TASKABLE, +false);
}

static endSEN(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishSENBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, '$SEN');
}

static finishSizePrefixedSENBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, '$SEN', true);
}

static createSEN(builder:flatbuffers.Builder, LATITUDE:number, LONGITUDE:number, ALTITUDE:number, CREATED_ATOffset:flatbuffers.Offset, CREATED_BYOffset:flatbuffers.Offset, DATA_MODE:DataMode, ID_SENSOROffset:flatbuffers.Offset, SITE_IDOffset:flatbuffers.Offset, SENSOR_TYPEOffset:flatbuffers.Offset, SENSOR_TYPE_SHORTOffset:flatbuffers.Offset, SOURCEOffset:flatbuffers.Offset, DATA_IDOffset:flatbuffers.Offset, CLASSIFICATIONOffset:flatbuffers.Offset, UPDATED_ATOffset:flatbuffers.Offset, UPDATED_BYOffset:flatbuffers.Offset, LAST_OB_TIMEOffset:flatbuffers.Offset, LOWER_LEFT_ELEVATION_LIMIT:number, UPPER_LEFT_AZIMUTH_LIMIT:number, LOWER_RIGHT_ELEVATION_LIMIT:number, LOWER_LEFT_AZIMUTH_LIMIT:number, UPPER_RIGHT_ELEVATION_LIMIT:number, UPPER_RIGHT_AZIMUTH_LIMIT:number, LOWER_RIGHT_AZIMUTH_LIMIT:number, UPPER_LEFT_ELEVATION_LIMIT:number, RIGHT_GEO_BELT_LIMIT:number, LEFT_GEO_BELT_LIMIT:number, BANDOffset:flatbuffers.Offset, MAGNITUDE_LIMIT:number, TASKABLE:boolean):flatbuffers.Offset {
  SEN.startSEN(builder);
  SEN.addLatitude(builder, LATITUDE);
  SEN.addLongitude(builder, LONGITUDE);
  SEN.addAltitude(builder, ALTITUDE);
  SEN.addCreatedAt(builder, CREATED_ATOffset);
  SEN.addCreatedBy(builder, CREATED_BYOffset);
  SEN.addDataMode(builder, DATA_MODE);
  SEN.addIdSensor(builder, ID_SENSOROffset);
  SEN.addSiteId(builder, SITE_IDOffset);
  SEN.addSensorType(builder, SENSOR_TYPEOffset);
  SEN.addSensorTypeShort(builder, SENSOR_TYPE_SHORTOffset);
  SEN.addSource(builder, SOURCEOffset);
  SEN.addDataId(builder, DATA_IDOffset);
  SEN.addClassification(builder, CLASSIFICATIONOffset);
  SEN.addUpdatedAt(builder, UPDATED_ATOffset);
  SEN.addUpdatedBy(builder, UPDATED_BYOffset);
  SEN.addLastObTime(builder, LAST_OB_TIMEOffset);
  SEN.addLowerLeftElevationLimit(builder, LOWER_LEFT_ELEVATION_LIMIT);
  SEN.addUpperLeftAzimuthLimit(builder, UPPER_LEFT_AZIMUTH_LIMIT);
  SEN.addLowerRightElevationLimit(builder, LOWER_RIGHT_ELEVATION_LIMIT);
  SEN.addLowerLeftAzimuthLimit(builder, LOWER_LEFT_AZIMUTH_LIMIT);
  SEN.addUpperRightElevationLimit(builder, UPPER_RIGHT_ELEVATION_LIMIT);
  SEN.addUpperRightAzimuthLimit(builder, UPPER_RIGHT_AZIMUTH_LIMIT);
  SEN.addLowerRightAzimuthLimit(builder, LOWER_RIGHT_AZIMUTH_LIMIT);
  SEN.addUpperLeftElevationLimit(builder, UPPER_LEFT_ELEVATION_LIMIT);
  SEN.addRightGeoBeltLimit(builder, RIGHT_GEO_BELT_LIMIT);
  SEN.addLeftGeoBeltLimit(builder, LEFT_GEO_BELT_LIMIT);
  SEN.addBand(builder, BANDOffset);
  SEN.addMagnitudeLimit(builder, MAGNITUDE_LIMIT);
  SEN.addTaskable(builder, TASKABLE);
  return SEN.endSEN(builder);
}

unpack(): SENT {
  return new SENT(
    this.LATITUDE(),
    this.LONGITUDE(),
    this.ALTITUDE(),
    this.CREATED_AT(),
    this.CREATED_BY(),
    this.DATA_MODE(),
    this.ID_SENSOR(),
    this.SITE_ID(),
    this.SENSOR_TYPE(),
    this.SENSOR_TYPE_SHORT(),
    this.SOURCE(),
    this.DATA_ID(),
    this.CLASSIFICATION(),
    this.UPDATED_AT(),
    this.UPDATED_BY(),
    this.LAST_OB_TIME(),
    this.LOWER_LEFT_ELEVATION_LIMIT(),
    this.UPPER_LEFT_AZIMUTH_LIMIT(),
    this.LOWER_RIGHT_ELEVATION_LIMIT(),
    this.LOWER_LEFT_AZIMUTH_LIMIT(),
    this.UPPER_RIGHT_ELEVATION_LIMIT(),
    this.UPPER_RIGHT_AZIMUTH_LIMIT(),
    this.LOWER_RIGHT_AZIMUTH_LIMIT(),
    this.UPPER_LEFT_ELEVATION_LIMIT(),
    this.RIGHT_GEO_BELT_LIMIT(),
    this.LEFT_GEO_BELT_LIMIT(),
    this.BAND(),
    this.MAGNITUDE_LIMIT(),
    this.TASKABLE()
  );
}


unpackTo(_o: SENT): void {
  _o.LATITUDE = this.LATITUDE();
  _o.LONGITUDE = this.LONGITUDE();
  _o.ALTITUDE = this.ALTITUDE();
  _o.CREATED_AT = this.CREATED_AT();
  _o.CREATED_BY = this.CREATED_BY();
  _o.DATA_MODE = this.DATA_MODE();
  _o.ID_SENSOR = this.ID_SENSOR();
  _o.SITE_ID = this.SITE_ID();
  _o.SENSOR_TYPE = this.SENSOR_TYPE();
  _o.SENSOR_TYPE_SHORT = this.SENSOR_TYPE_SHORT();
  _o.SOURCE = this.SOURCE();
  _o.DATA_ID = this.DATA_ID();
  _o.CLASSIFICATION = this.CLASSIFICATION();
  _o.UPDATED_AT = this.UPDATED_AT();
  _o.UPDATED_BY = this.UPDATED_BY();
  _o.LAST_OB_TIME = this.LAST_OB_TIME();
  _o.LOWER_LEFT_ELEVATION_LIMIT = this.LOWER_LEFT_ELEVATION_LIMIT();
  _o.UPPER_LEFT_AZIMUTH_LIMIT = this.UPPER_LEFT_AZIMUTH_LIMIT();
  _o.LOWER_RIGHT_ELEVATION_LIMIT = this.LOWER_RIGHT_ELEVATION_LIMIT();
  _o.LOWER_LEFT_AZIMUTH_LIMIT = this.LOWER_LEFT_AZIMUTH_LIMIT();
  _o.UPPER_RIGHT_ELEVATION_LIMIT = this.UPPER_RIGHT_ELEVATION_LIMIT();
  _o.UPPER_RIGHT_AZIMUTH_LIMIT = this.UPPER_RIGHT_AZIMUTH_LIMIT();
  _o.LOWER_RIGHT_AZIMUTH_LIMIT = this.LOWER_RIGHT_AZIMUTH_LIMIT();
  _o.UPPER_LEFT_ELEVATION_LIMIT = this.UPPER_LEFT_ELEVATION_LIMIT();
  _o.RIGHT_GEO_BELT_LIMIT = this.RIGHT_GEO_BELT_LIMIT();
  _o.LEFT_GEO_BELT_LIMIT = this.LEFT_GEO_BELT_LIMIT();
  _o.BAND = this.BAND();
  _o.MAGNITUDE_LIMIT = this.MAGNITUDE_LIMIT();
  _o.TASKABLE = this.TASKABLE();
}
}

export class SENT implements flatbuffers.IGeneratedObject {
constructor(
  public LATITUDE: number = 0.0,
  public LONGITUDE: number = 0.0,
  public ALTITUDE: number = 0.0,
  public CREATED_AT: string|Uint8Array|null = null,
  public CREATED_BY: string|Uint8Array|null = null,
  public DATA_MODE: DataMode = DataMode.real,
  public ID_SENSOR: string|Uint8Array|null = null,
  public SITE_ID: string|Uint8Array|null = null,
  public SENSOR_TYPE: string|Uint8Array|null = null,
  public SENSOR_TYPE_SHORT: string|Uint8Array|null = null,
  public SOURCE: string|Uint8Array|null = null,
  public DATA_ID: string|Uint8Array|null = null,
  public CLASSIFICATION: string|Uint8Array|null = null,
  public UPDATED_AT: string|Uint8Array|null = null,
  public UPDATED_BY: string|Uint8Array|null = null,
  public LAST_OB_TIME: string|Uint8Array|null = null,
  public LOWER_LEFT_ELEVATION_LIMIT: number = 0.0,
  public UPPER_LEFT_AZIMUTH_LIMIT: number = 0.0,
  public LOWER_RIGHT_ELEVATION_LIMIT: number = 0.0,
  public LOWER_LEFT_AZIMUTH_LIMIT: number = 0.0,
  public UPPER_RIGHT_ELEVATION_LIMIT: number = 0.0,
  public UPPER_RIGHT_AZIMUTH_LIMIT: number = 0.0,
  public LOWER_RIGHT_AZIMUTH_LIMIT: number = 0.0,
  public UPPER_LEFT_ELEVATION_LIMIT: number = 0.0,
  public RIGHT_GEO_BELT_LIMIT: number = 0.0,
  public LEFT_GEO_BELT_LIMIT: number = 0.0,
  public BAND: string|Uint8Array|null = null,
  public MAGNITUDE_LIMIT: number = 0.0,
  public TASKABLE: boolean = false
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const CREATED_AT = (this.CREATED_AT !== null ? builder.createString(this.CREATED_AT!) : 0);
  const CREATED_BY = (this.CREATED_BY !== null ? builder.createString(this.CREATED_BY!) : 0);
  const ID_SENSOR = (this.ID_SENSOR !== null ? builder.createString(this.ID_SENSOR!) : 0);
  const SITE_ID = (this.SITE_ID !== null ? builder.createString(this.SITE_ID!) : 0);
  const SENSOR_TYPE = (this.SENSOR_TYPE !== null ? builder.createString(this.SENSOR_TYPE!) : 0);
  const SENSOR_TYPE_SHORT = (this.SENSOR_TYPE_SHORT !== null ? builder.createString(this.SENSOR_TYPE_SHORT!) : 0);
  const SOURCE = (this.SOURCE !== null ? builder.createString(this.SOURCE!) : 0);
  const DATA_ID = (this.DATA_ID !== null ? builder.createString(this.DATA_ID!) : 0);
  const CLASSIFICATION = (this.CLASSIFICATION !== null ? builder.createString(this.CLASSIFICATION!) : 0);
  const UPDATED_AT = (this.UPDATED_AT !== null ? builder.createString(this.UPDATED_AT!) : 0);
  const UPDATED_BY = (this.UPDATED_BY !== null ? builder.createString(this.UPDATED_BY!) : 0);
  const LAST_OB_TIME = (this.LAST_OB_TIME !== null ? builder.createString(this.LAST_OB_TIME!) : 0);
  const BAND = (this.BAND !== null ? builder.createString(this.BAND!) : 0);

  return SEN.createSEN(builder,
    this.LATITUDE,
    this.LONGITUDE,
    this.ALTITUDE,
    CREATED_AT,
    CREATED_BY,
    this.DATA_MODE,
    ID_SENSOR,
    SITE_ID,
    SENSOR_TYPE,
    SENSOR_TYPE_SHORT,
    SOURCE,
    DATA_ID,
    CLASSIFICATION,
    UPDATED_AT,
    UPDATED_BY,
    LAST_OB_TIME,
    this.LOWER_LEFT_ELEVATION_LIMIT,
    this.UPPER_LEFT_AZIMUTH_LIMIT,
    this.LOWER_RIGHT_ELEVATION_LIMIT,
    this.LOWER_LEFT_AZIMUTH_LIMIT,
    this.UPPER_RIGHT_ELEVATION_LIMIT,
    this.UPPER_RIGHT_AZIMUTH_LIMIT,
    this.LOWER_RIGHT_AZIMUTH_LIMIT,
    this.UPPER_LEFT_ELEVATION_LIMIT,
    this.RIGHT_GEO_BELT_LIMIT,
    this.LEFT_GEO_BELT_LIMIT,
    BAND,
    this.MAGNITUDE_LIMIT,
    this.TASKABLE
  );
}
}
